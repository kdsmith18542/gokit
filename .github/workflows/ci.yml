name: Go CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  GO111MODULE: on
  CGO_ENABLED: 1

jobs:
  # Quality checks and testing
  quality:
    name: Quality & Security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
        cache-dependency-path: go.mod

    - name: Install dependencies
      run: go mod download

    - name: Lint (go vet)
      run: go vet ./...

    - name: Security Scan (gosec)
      uses: securego/gosec@master
      with:
        args: ./...

    - name: Run tests with coverage
      run: |
        go test -v -coverprofile=coverage.out -covermode=atomic ./...
        go test -v ./integration_test.go

    - name: Run race detection tests (optional)
      run: |
        go test -v -race ./... || echo "Race detection not available on this platform"
        go test -v -race ./integration_test.go || echo "Race detection not available for integration tests"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
        cache-dependency-path: go.mod

    - name: Install dependencies
      run: go mod download

    - name: Run integration tests
      run: |
        go test -v -timeout=10m ./integration_test.go -run TestIntegration_CompleteWorkflow
        go test -v -timeout=10m ./integration_test.go -run TestIntegration_CrossPackageFeatures

  # Performance tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
        cache-dependency-path: go.mod

    - name: Install dependencies
      run: go mod download

    - name: Run performance tests
      run: |
        go test -v -timeout=5m ./integration_test.go -run TestIntegration_Performance
        go test -v -timeout=5m ./integration_test.go -run TestIntegration_Stress

  # Multi-platform build
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: [quality, integration]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.23']
        include:
          - os: ubuntu-latest
            platform: linux/amd64
          - os: windows-latest
            platform: windows/amd64
          - os: macos-latest
            platform: darwin/amd64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        cache-dependency-path: go.mod

    - name: Install dependencies
      run: go mod download

    - name: Build
      run: |
        echo "Building gokit-cli..."
        go build -v -ldflags="-s -w" ./cmd/gokit-cli
        echo "Building gokit..."
        go build -v -ldflags="-s -w" ./cmd/gokit || echo "gokit build failed, continuing..."

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}
        path: |
          gokit-cli
          gokit
          gokit-cli.exe
          gokit.exe

  # Release
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: []
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
        cache-dependency-path: go.mod

    - name: Install dependencies
      run: go mod download

    - name: Build release binaries
      run: |
        mkdir -p dist
        echo "Building gokit-cli for all platforms..."
        # Linux
        GOOS=linux GOARCH=amd64 go build -v -ldflags="-s -w" -o dist/gokit-cli-linux-amd64 ./cmd/gokit-cli
        GOOS=linux GOARCH=amd64 go build -v -ldflags="-s -w" -o dist/gokit-linux-amd64 ./cmd/gokit || echo "gokit linux build failed"
        
        # Windows
        GOOS=windows GOARCH=amd64 go build -v -ldflags="-s -w" -o dist/gokit-cli-windows-amd64.exe ./cmd/gokit-cli
        GOOS=windows GOARCH=amd64 go build -v -ldflags="-s -w" -o dist/gokit-windows-amd64.exe ./cmd/gokit || echo "gokit windows build failed"
        
        # macOS
        GOOS=darwin GOARCH=amd64 go build -v -ldflags="-s -w" -o dist/gokit-cli-darwin-amd64 ./cmd/gokit-cli
        GOOS=darwin GOARCH=amd64 go build -v -ldflags="-s -w" -o dist/gokit-darwin-amd64 ./cmd/gokit || echo "gokit darwin build failed"

    - name: Create release archive
      run: |
        cd dist
        # Create archives for gokit-cli (always available)
        tar -czf gokit-cli-linux-amd64.tar.gz gokit-cli-linux-amd64
        zip gokit-cli-windows-amd64.zip gokit-cli-windows-amd64.exe
        tar -czf gokit-cli-darwin-amd64.tar.gz gokit-cli-darwin-amd64
        
        # Create archives for gokit if available
        if [ -f gokit-linux-amd64 ]; then
          tar -czf gokit-linux-amd64.tar.gz gokit-linux-amd64
        fi
        if [ -f gokit-windows-amd64.exe ]; then
          zip gokit-windows-amd64.zip gokit-windows-amd64.exe
        fi
        if [ -f gokit-darwin-amd64 ]; then
          tar -czf gokit-darwin-amd64.tar.gz gokit-darwin-amd64
        fi

    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: dist/*.tar.gz,dist/*.zip

    - name: Create GitHub Release
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Get the tag name from the release event
          const tagName = context.ref.replace('refs/tags/', '');
          
          try {
            // Try to create a new release
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `GoKit ${tagName} - Web Dev Toolkit`,
              body: `## What's Changed\n\n- Initial release of GoKit CLI tools\n- Form validation middleware\n- Internationalization (i18n) support\n- File upload handling\n- Observability features\n\n## Downloads\n\nAttached binaries for Linux, Windows, and macOS.`,
              draft: false,
              prerelease: false
            });
            
            console.log(`Created release: ${release.data.html_url}`);
          } catch (error) {
            if (error.status === 422) {
              // Release already exists, try to update it
              console.log('Release already exists, updating...');
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const existingRelease = releases.data.find(r => r.tag_name === tagName);
              if (existingRelease) {
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: existingRelease.id,
                  name: `GoKit ${tagName} - Web Dev Toolkit`,
                  body: `## What's Changed\n\n- Initial release of GoKit CLI tools\n- Form validation middleware\n- Internationalization (i18n) support\n- File upload handling\n- Observability features\n\n## Downloads\n\nAttached binaries for Linux, Windows, and macOS.`
                });
                console.log(`Updated release: ${existingRelease.html_url}`);
              }
            } else {
              throw error;
            }
          }
          
          // Upload assets
          const distDir = 'dist';
          const files = fs.readdirSync(distDir).filter(file => 
            file.endsWith('.tar.gz') || file.endsWith('.zip')
          );
          
          for (const file of files) {
            const filePath = path.join(distDir, file);
            const fileBuffer = fs.readFileSync(filePath);
            
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: (await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tagName
              })).data.id,
              name: file,
              data: fileBuffer
            });
            console.log(`Uploaded: ${file}`);
          }
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }} 